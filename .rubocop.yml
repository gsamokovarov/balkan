AllCops:
  Exclude:
    - "db/**/*"
    - "bin/*"
  SuggestExtensions: false
  NewCops: enable

# I can set other things than accessors.
Naming/AccessorMethodName:
  Enabled: false

# Let me reminisce my Golang days.
Naming/RescuedExceptionsVariableName:
  PreferredName: err

# Don't complain on missing documentation for every class.
Style/Documentation:
  Enabled: false

# No frozen string literals
Style/FrozenStringLiteralComment:
  EnforcedStyle: never

# Let me write them typographic (â€“) dashes in comments.
Style/AsciiComments:
  Enabled: false

# Don't enforce Kernel#lambda.
Style/Lambda:
  Enabled: false

# Since module_function is a visibilty modifier, you can't have private
# singleton methods. E.g. in some cases, we _do_ need to use extend self.
Style/ModuleFunction:
  Enabled: false

# I like them and am gonna use them in multiline blocks. A nice way to enable
# their usage by disabling their cop.
Style/NumberedParameters:
  Enabled: false

# Let me use and/or precedence in conditions, please!
Style/AndOr:
  Enabled: false

# I think this results in uglier code, depending on the situation.
#
# Example:
#
#   if old_password or password
#     change_password(old_password, password)
#   end
#
# Versus:
#
#   change_password(old_password, password) if old_password or password
#
# It depends, but if I have a complex condition or a longer line, I prefer the
# more explicit if condition.
Style/IfUnlessModifier:
  Enabled: false

# Recently, I tend to prefer the named boolean operators. Yeah, they do have
# different precedence, but still.
Style/Not:
  Enabled: false

# I don't think this results in better code. We're flatting it out, while it is
# really nested. Why hide that?
Style/GuardClause:
  Enabled: false

Style/StabbyLambdaParentheses:
  Enabled: false

# Enfore trailing commas. I've run into way too many copy-paste issues.
Style/TrailingCommaInArguments:
   EnforcedStyleForMultiline: comma

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

# Some of our admin code is generated by administrate. I don't wanna change
# this autogenerated code.
Style/SymbolArray:
  Enabled: false

# Prefer double quotes because at this time I like them quite better.
Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/AccessModifierDeclarations:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

# Dogfood the no-parens love.
Style/MethodCallWithArgsParentheses:
  Enabled: true
  EnforcedStyle: omit_parentheses
  AllowParenthesesInMultilineCall: true
  AllowParenthesesInChaining: true
  AllowParenthesesInCamelCaseMethod: true

Style/MutableConstant:
  Enabled: false

# I like the value omission hash syntax.
Style/HashSyntax:
  EnforcedShorthandSyntax: always

# Omitting the parens in an array is beautiful!
Style/HashAsLastArrayItem:
  Enabled: false

# This is an application, not a library. We don't need to go that far.
Style/DocumentDynamicEvalDefinition:
  Enabled: false

# Let's not enforce arbitrary metrics.
Metrics/MethodLength:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

# Sometimes life leaves you no choice. True story.
Lint/SuppressedException:
  Enabled: false

# I do that a lot. Think it's okay.
Lint/AssignmentInCondition:
  Enabled: false

# I already use it in multiline blocks. It's fine.
Lint/ItWithoutArgumentsInBlock:
  Enabled: false


Layout/DefEndAlignment:
  EnforcedStyleAlignWith: start_of_line

# I think it's safe to ignore the 80 chars limit.
Layout/LineLength:
  Enabled: false

Layout/LineContinuationLeadingSpace:
  Enabled: false

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/SpaceInLambdaLiteral:
  Enabled: false
